program = _{SOI~statement* ~ EOI}

statement = _{
    emptyStatement
  | useStatement ~ eos?
  | controlFlow ~ eos?
  | expr~eos
  | data
}
/*====================================================================================================================*/
emptyStatement = {eos | Separate }
eos = {Semicolon}
comma_or_semi = _{Comma|Semicolon}
/*====================================================================================================================*/
//FIXME: 修复 nested using
useStatement = _{
    Use ~ use_alias
  | Use ~ use_module_select
  | Use ~ use_module_string
}
use_alias = !{moduleName~As~SYMBOL}
use_module_select = !{moduleName ~ ((Dot|Proportion) ~ moduleSelect)?}
use_module_string = !{String ~ As ~ SYMBOL|String ~ (Dot ~ moduleSelect)?}
moduleName = {namespace|SYMBOL}
moduleSelect = { Star | "{"~idTuples~ ( comma_or_semi? ~ idTuples)* ~comma_or_semi?~"}"}
idTuples={use_alias|use_module_select}
///#C678DD
Cover = ${Star}
//!#C678DD: With|Use|As
With = @{"with"}
Use  = @{"use"}
As   = @{"as"}
/*====================================================================================================================*/
controlFlow = _{if_statement|for_statement}
block = !{"{" ~ statement* ~ "}"}
/*====================================================================================================================*/
if_statement ={if_nested_else|if_nested|if_single_else|if_single}
if_single = _{ If~condition~ block}
if_nested = _{ If~ condition~ block ~ else_if_block+}
if_single_else = _{ If~condition~ block ~ if_else_block}
if_nested_else = _{ If~ condition~ block~ else_if_block+ ~ if_else_block}
if_trinocular = _{
    term ~ Question ~ term ~ Colon ~ term
  | term ~ If ~ term ~ Else ~ term
}
else_if_block = !{ Else ~ If ~condition~ block}
if_else_block = _{ Else ~ block}
//!#C678DD: If|Else
If = @{"if"}
Else = @{"else"}
/*====================================================================================================================*/
for_statement = _{For ~ for_in_loop}
for_in_loop = {SYMBOL~In~expr~block}
//!#C678DD: For|In
For = @{"for"}
In = @{"in"}
/*====================================================================================================================*/
functionApply = {
    function_name ~ "(" ~ expr? ~")"|
    function_module? ~ function_name ~ "(" ~ expr? ~")"
}
methodApply = {expr ~Dot ~ function_name ~ "(" ~ expr? ~")"}


///#61AFEF
function_name = {SYMBOL}
function_module = {(namespace ~ Dot)? ~ (SYMBOL ~ Dot)*}
/*====================================================================================================================*/
expr = !{
    term ~ slice
  | trinoculars
  | term ~ (Infix ~ term)*
}
term =  { Prefix* ~ node ~ Postfix* }
node = _{  data| "(" ~ expr ~ ")" }
condition  = { node|expr}
expressions = {"("~expr~ ( comma_or_semi? ~ expr)* ~comma_or_semi?~")"}
trinoculars = _{if_trinocular}
/*====================================================================================================================*/
/// #E06C75
type_expr = !{ type_term ~ (Infix ~ type_term)* | data | functionApply}
type_term =  { Prefix* ~ type_node ~ Postfix* }
type_node = _{  "(" ~ type_expr ~ ")"  }


type_prefix = _{type_expr}
type_suffix = _{To~type_expr}

//!#C678DD: Type|To
Type = @{"type"}
/*====================================================================================================================*/
data = {dict|list|Null|Boolean|Byte|Number| String |Symbol }
dict = { "{" ~key_value? ~(Comma ~key_value)* ~Comma? ~"}"}
list = { "[" ~element? ~(Comma ~element)* ~Comma? ~"]"}
slice ={"[" ~index ~(Comma ~index)* ~Comma? ~"]"}
index = { index_step|index_range|index_element}
key_value =!{key_valid ~ Colon ~element}
key_valid =!{Integer | SYMBOL | String}
element =!{data | expr | statement}
index_element = !{element}
index_range = !{element? ~ Colon ~ element?}
index_step = !{element? ~ Colon ~ element?~ Colon ~ element?}
/*====================================================================================================================*/
///#D19A66
Null = @{"null"}
/*====================================================================================================================*/
///#D19A66
Boolean = !{True|False}
True    = @{"true"}
False   = @{"false"}
/*====================================================================================================================*/
///#D19A66
Byte     = ${Byte_BIN|Byte_OCT|Byte_HEX}
Byte_BIN = ${Zero ~ B ~ (Underline? ~ ASCII_BIN_DIGIT)+}
Byte_OCT = ${Zero ~ O ~ (Underline? ~ ASCII_OCT_DIGIT)+}
Byte_HEX = ${Zero ~ X ~ (Underline? ~ ASCII_HEX_DIGIT)+}
/*====================================================================================================================*/
//!#D19A66: Integer|Decimal|DecimalBad
Number     = ${Complex|Decimal|DecimalBad|Integer}
Decimal    = ${Integer ~Dot~ ASCII_DIGIT+}
DecimalBad = ${Integer~Dot | Dot~ASCII_DIGIT+}
Complex    = ${(Decimal|Integer)~ SYMBOL}
Integer    = @{Zero|ASCII_DIGIT ~ (Underline? ~ ASCII_NONZERO_DIGIT)*}
/*====================================================================================================================*/
//!#3C963C: String
//!#98C379: StringText|StringLiteralText
String            = ${SYMBOL? ~ (StringNormal|StringLiteral|StringEmpty)}
StringNormal      = {StringStart ~ StringText ~ StringEnd}
StringLiteral     = {Apostrophe ~ StringLiteralText ~ Apostrophe}
StringEmpty       = {Quotation{2}|Apostrophe{2}}
StringText        = {(!(Quotation ~ PEEK) ~ ANY)*}
StringLiteralText = {(!Apostrophe~ ANY)*}
StringStart       = @{Quotation{1}~PUSH(Quotation*)}
StringEnd         = @{POP ~ Quotation{1}}
/*====================================================================================================================*/
// NEWLINE = @{"\r"~"\n"|"\r"|"\n"}
WHITESPACE = _{NEWLINE|SPACE_SEPARATOR|"\t"}
//!#7F848E: MultiLineComment
COMMENT = {MultiLineComment|LineCommentSimple|LineCommentTodo|LineCommentFixme|LineCommentWarning}
///Gray
LineCommentSimple = ${ "///" ~ (!NEWLINE ~ ANY)*}
///Green
LineCommentTodo = ${ "//?" ~ (!NEWLINE ~ ANY)*}
///Red
LineCommentFixme = ${ "//!" ~ (!NEWLINE ~ ANY)*}
///Yellow
LineCommentWarning = ${ "//*" ~ (!NEWLINE ~ ANY)*}
///Gray
MultiLineComment = ${ "%%%" ~ (MultiLineComment | !"%%%" ~ ANY)* ~ "%%%"}
/*====================================================================================================================*/
Symbol = ${SYMBOL|namespace}
namespace = ${SYMBOL ~ (Proportion ~ SYMBOL)+}
SYMBOL = @{!KeyWords~NameStartCharacter~ NameCharacter*}
KeyWords = _{If|Else|For|In|Use}
NameCharacter = _{ASCII_DIGIT| NameStartCharacter}
NameStartCharacter = _{Underline | ASCII_ALPHA}
/*====================================================================================================================*/
Zero = _{"0"}
X = _{"x"|"X"}
O = _{"o"|"O"}
B = _{"b"|"B"}
/*====================================================================================================================*/
//!#56B6C2: Prefix|Infix|Postfix
Prefix = @{Plus|Increase|Decrease}
Postfix = @{"!"}
Infix = @{o_add|o_times|o_power}


Set = @{"="}

Or = @{"|"}
LazyOr = @{"||"}


Star =@{"*"}
Slash =@{"/"}

Proportion = @{"::"|"∷"}//U+2237
Comma =@{","|"，"} //U+FF0C
Dot = @{"."}
Separate = @{";;"}
Semicolon = @{";" | "；"} //U+FF1B
//!#56B6C2: Question|Colon
Colon = @{":"|"："} //U+FF1A
Question=@{"?"}
Underline = @{"_"}



Import =@{"<<<"|"⋘"} //U+22D8
Export =@{">>>"|"⋙"} //U+22D9
LeftShift =@{"<<"|"≪"} //U+226A
RightShift =@{">>"|"≫"} //U+226B
LessEqual =@{"<="}
GraterEqual =@{">="}
Less =@{"<"}
Grater =@{">"}



Equivalent =@{"==="}
NotEquivalent =@{"=!="}
Equal =@{"=="}
NotEqual =@{"!="|"≠"} //U+2260






o_add = _{Plus|Minus}
Plus =@{"+"}
Minus =@{"-"}
o_times = _{Multiply|CenterDot|Kronecker|TensorProduct|Divide|Quotient |Modulo }
Multiply =@{Star | "×"} //U+00D7
CenterDot = @{"⋅"} //U+22C5
Kronecker =@{"⊗"} //U+2297
TensorProduct=@{"⊙"} //U+2299
Divide = @{Slash | "÷"} //U+00F7
Quotient = @{"//"}
Modulo = @{"%"}
Remainder =@{"⁒"} //U+2052 //⸓

o_power= _{ Power }
Power = @{"^"}
Surd = @{"√"} //U+221A


Increase =@{"++"}
Decrease =@{"--"}


To =@{"->"}


Elvis =@{":?"}
Map =@ {"/@"}


Quote =@{"`"}
Acute =@{"´"} // U+00B4
Apostrophe = @{"'"}
Quotation = @{"\""}


LogicOr =@{"||"|"∧"} //U+2227
LogicAnd =@{"&&"|"∨"} //U+2228
LogicNot =@{"¬"} //U+00AC

Ellipsis =@{"..."|"…"} // U+2026




LogicXor =@{"⊕"} //U+2295
MapAll =@{"//@"}

Output =@{"%%"}

Concat =@{"~~"}
Destruct =@{"~="}


DoubleBang =@{"!!"}
BitNot =@{"!"}



Curry =@{"@@@"}
Apply =@{"@@"}
LetAssign =@{"@="}